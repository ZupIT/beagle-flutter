/*
 * Copyright 2020, 2022 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import 'dart:core';

/// This interface is used to represent the report generated by the analytics
class AnalyticsRecord {
  AnalyticsRecord(
      {required this.type,
      required this.platform,
      this.attributes,
      this.component,
      this.beagleAction,
      this.event,
      this.additionalEntries,
      required this.timestamp,
      this.screen});

  /// type is a String that represent the type of our report, if the report is an action or a screen
  String type;

  /// platform is a String that represents the platform that generated the analytics report
  String platform;

  /// attributes is a Map in which the key is the attribute of the report and the
  /// the value is the value of the attribute that will be reported
  Map<String, dynamic>? attributes;

  /// component is a Map in which have some properties about the component that called the action
  Map<String, dynamic>? component;

  /// beagleAction is a String that contains the name of the action reported
  String? beagleAction;

  /// event is a String that contains the name of the event that caused the action
  String? event;

  /// additionalEntries is a Map that contains additionalEntries provided by the ActionAnalyticsConfig
  Map<String, dynamic>? additionalEntries;

  /// timestamp is a Long that have the timestamp when the action was called.
  int timestamp;

  /// screen is a String that contains the screen url/id
  String? screen;

  static AnalyticsRecord fromMap(Map<String, dynamic> map) {
    return AnalyticsRecord(
        type: map['type'],
        platform: map['platform'],
        timestamp: map['timestamp'],
        screen: map['screen'],
        event: map['event'],
        component: map['component'],
        beagleAction: map['beagleAction'],
        additionalEntries: map['additionalEntries'],
        attributes: map['attributes']);
  }

  /// Creates a map with the attributes of this class
  Map<String, dynamic> toMap() {
    return {
      'type': type,
      'platform': platform,
      'attributes': attributes,
      'component': component,
      'beagleAction': beagleAction,
      'event': event,
      'additionalEntries': additionalEntries,
      'timestamp': timestamp,
      'screen': screen,
    };
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AnalyticsRecord &&
          runtimeType == other.runtimeType &&
          type == other.type &&
          platform == other.platform &&
          attributes == other.attributes &&
          component == other.component &&
          beagleAction == other.beagleAction &&
          event == other.event &&
          additionalEntries == other.additionalEntries &&
          timestamp == other.timestamp &&
          screen == other.screen;

  @override
  int get hashCode =>
      type.hashCode ^
      platform.hashCode ^
      attributes.hashCode ^
      component.hashCode ^
      beagleAction.hashCode ^
      event.hashCode ^
      additionalEntries.hashCode ^
      timestamp.hashCode ^
      screen.hashCode;
}
